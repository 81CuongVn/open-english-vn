---
interface Props {
  placeholder?: string;
}

const { placeholder = "Search resources..." } = Astro.props;
---

<div class="relative w-full max-w-2xl mx-auto mb-8">
  <div class="relative">
    <input
      type="text"
      id="search-input"
      class="w-full px-4 py-2 pl-10 text-gray-900 dark:text-white bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      placeholder={placeholder}
      aria-label="Search resources"
    />
    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
      <svg
        class="w-5 h-5 text-gray-500 dark:text-gray-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
        />
      </svg>
    </div>
  </div>
</div>

<script>
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const resourceCards = document.querySelectorAll('.resource-card');

  if (searchInput && resourceCards.length > 0) {
    searchInput.addEventListener('input', (e) => {
      const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
      
      resourceCards.forEach((card) => {
        const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
        const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
        const categories = Array.from(card.querySelectorAll('span'))
          .map(span => span.textContent?.toLowerCase() || '');
        
        const matchesSearch = 
          title.includes(searchTerm) ||
          description.includes(searchTerm) ||
          categories.some(category => category.includes(searchTerm));
        
        card.classList.toggle('hidden', !matchesSearch);
      });
    });
  }
</script> 